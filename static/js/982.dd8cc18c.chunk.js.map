{"version":3,"file":"static/js/982.dd8cc18c.chunk.js","mappings":"mQA0OA,EAzFqB,WACnB,OAAgCA,EAAAA,EAAAA,UAAS,CACvCC,KAAM,GACNC,MAAO,GACPC,SAAU,GACVC,QAAS,KAJX,eAAOC,EAAP,KAAiBC,EAAjB,KAOA,GAA6BC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAtCC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,MACbC,GAAWC,EAAAA,EAAAA,MAEXC,EAAe,SAAAC,GACnB,MAAwBA,EAAEC,OAAlBf,EAAR,EAAQA,KAAMgB,EAAd,EAAcA,MACdX,GAAY,SAAAY,GAAQ,yBAAUA,GAAV,cAAqBjB,EAAOgB,GAA5B,GACrB,EAYD,OACE,kBAAME,SAXa,SAAAJ,GACnBA,EAAEK,iBAEF,IAAQnB,EAAmCI,EAAnCJ,KAAMC,EAA6BG,EAA7BH,MAAOC,EAAsBE,EAAtBF,SAEjBA,IAFuCE,EAAZD,SAG7BQ,GAASS,EAAAA,EAAAA,IAAS,CAAEpB,KAAAA,EAAMC,MAAAA,EAAOC,SAAAA,IAEpC,EAGC,WACE,4BACE,kBAAOmB,QAAQ,QAAf,SAAuB,YACvB,kBACEC,KAAK,QACLC,GAAG,QACHvB,KAAK,QACLgB,MAAOZ,EAASH,MAChBuB,SAAUX,EACVY,UAAQ,QAIZ,4BACE,kBAAOJ,QAAQ,WAAf,SAA0B,cAC1B,kBACEC,KAAK,WACLC,GAAG,WACHvB,KAAK,WACLgB,MAAOZ,EAASF,SAChBsB,SAAUX,EACVa,aAAa,eACbD,UAAQ,QAIZ,4BACE,kBAAOJ,QAAQ,UAAf,SAAyB,sBACzB,kBACEC,KAAK,WACLC,GAAG,UACHvB,KAAK,UACLgB,MAAOZ,EAASD,QAChBqB,SAAUX,EACVa,aAAa,eACbD,UAAQ,QAIZ,4BACE,kBAAOJ,QAAQ,OAAf,SAAsB,UACtB,kBACEC,KAAK,OACLC,GAAG,OACHvB,KAAK,OACLgB,MAAOZ,EAASJ,KAChBwB,SAAUX,EACVY,UAAQ,QAIZ,0BACE,mBAAQH,KAAK,SAASK,SAAUlB,EAAhC,SAA2C,eAK5CC,IAAS,uBAAIA,MAGnB,E,UCvND,EAbiB,WACf,OACE,SAAC,KAAD,WACE,4BACE,SAAC,KAAD,WACE,kBAAOkB,UAAWC,EAAAA,EAAAA,MAAlB,SAA+B,oBAEjC,SAACC,EAAD,QAIP,C,qBCdD,KAAgB,MAAQ,uB","sources":["components/FormRegist/FormRegist.jsx","Page/RegistrationPage/Registration.jsx","webpack://react-hw-08-phonebook/./src/Page/ContactPage/Contact.module.css?df73"],"sourcesContent":["// import { useDispatch, useSelector } from 'react-redux';\n\n// import { register } from 'redux/auth/authOperations';\n// import { Button, Form, Input } from 'antd';\n\n// const FormRegist = () => {\n//   const [form] = Form.useForm();\n//   const { isLoading, error } = useSelector(state => state.auth);\n//   const dispatch = useDispatch();\n\n//   const onFinishing = values => {\n//     const { name, email, password, confirm } = values;\n\n//     if (password === confirm) {\n//       dispatch(register({ name, email, password }));\n//       !isLoading && !error && form.resetFields();\n//     }\n//   };\n\n//   const formItemLayout = {\n//     labelCol: {\n//       span: 24,\n//     },\n//     wrapperCol: {\n//       span: 24,\n//     },\n//   };\n\n//   const tailFormItemLayout = {\n//     wrapperCol: {\n//       xs: {\n//         span: 24,\n//         offset: 0,\n//       },\n//       sm: {\n//         span: 16,\n//         offset: 4,\n//       },\n//     },\n//   };\n\n//   return (\n//     <Form\n//       {...formItemLayout}\n//       form={form}\n//       name=\"register\"\n//       onFinish={onFinishing}\n//       size={'default'}\n//       initialValues={{\n//         residence: ['zhejiang', 'hangzhou', 'xihu'],\n//         prefix: '86',\n//       }}\n//       style={{\n//         width: 300,\n//       }}\n//       scrollToFirstError\n//     >\n//       <Form.Item\n//         name=\"email\"\n//         label=\"E-mail\"\n//         rules={[\n//           {\n//             type: 'email',\n//             message: 'The input is not valid E-mail!',\n//           },\n//           {\n//             required: true,\n//             message: 'Please input your E-mail!',\n//           },\n//         ]}\n//       >\n//         <Input />\n//       </Form.Item>\n\n//       <Form.Item\n//         name=\"password\"\n//         label=\"Password\"\n//         rules={[\n//           {\n//             required: true,\n//             message: 'Please input your password!',\n//           },\n//         ]}\n//         hasFeedback\n//       >\n//         {/* <Input.Password /> */}\n//         <Input.Password autoComplete=\"new-password\" />\n//       </Form.Item>\n\n//       <Form.Item\n//         name=\"confirm\"\n//         label=\"Confirm Password\"\n//         dependencies={['password']}\n//         hasFeedback\n//         rules={[\n//           {\n//             required: true,\n//             message: 'Please confirm your password!',\n//           },\n//           ({ getFieldValue }) => ({\n//             validator(_, value) {\n//               if (!value || getFieldValue('password') === value) {\n//                 return Promise.resolve();\n//               }\n//               return Promise.reject(\n//                 new Error('The new password that you entered do not match!')\n//               );\n//             },\n//           }),\n//         ]}\n//       >\n//         {/* <Input.Password /> */}\n//         <Input.Password autoComplete=\"new-password\" />\n//       </Form.Item>\n\n//       <Form.Item\n//         name=\"name\"\n//         label=\"Name\"\n//         tooltip=\"What do you want others to call you?\"\n//         rules={[\n//           {\n//             required: true,\n//             message: 'Please input your name!',\n//             whitespace: true,\n//           },\n//         ]}\n//       >\n//         <Input />\n//       </Form.Item>\n\n//       <Form.Item {...tailFormItemLayout}>\n//         <Button type=\"primary\" htmlType=\"submit\">\n//           Register\n//         </Button>\n//       </Form.Item>\n//     </Form>\n//   );\n// };\n\n// export default FormRegist;\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { register } from 'redux/auth/authOperations';\nimport { useState } from 'react';\n\nconst FormRegister = () => {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    password: '',\n    confirm: '',\n  });\n\n  const { isLoading, error } = useSelector(state => state.auth);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    setFormData(prevData => ({ ...prevData, [name]: value }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const { name, email, password, confirm } = formData;\n\n    if (password === confirm) {\n      dispatch(register({ name, email, password }));\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <label htmlFor=\"email\">E-mail</label>\n        <input\n          type=\"email\"\n          id=\"email\"\n          name=\"email\"\n          value={formData.email}\n          onChange={handleChange}\n          required\n        />\n      </div>\n\n      <div>\n        <label htmlFor=\"password\">Password</label>\n        <input\n          type=\"password\"\n          id=\"password\"\n          name=\"password\"\n          value={formData.password}\n          onChange={handleChange}\n          autoComplete=\"new-password\"\n          required\n        />\n      </div>\n\n      <div>\n        <label htmlFor=\"confirm\">Confirm Password</label>\n        <input\n          type=\"password\"\n          id=\"confirm\"\n          name=\"confirm\"\n          value={formData.confirm}\n          onChange={handleChange}\n          autoComplete=\"new-password\"\n          required\n        />\n      </div>\n\n      <div>\n        <label htmlFor=\"name\">Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          name=\"name\"\n          value={formData.name}\n          onChange={handleChange}\n          required\n        />\n      </div>\n\n      <div>\n        <button type=\"submit\" disabled={isLoading}>\n          Register\n        </button>\n      </div>\n\n      {error && <p>{error}</p>}\n    </form>\n  );\n};\n\nexport default FormRegister;\n","import { Helmet, HelmetProvider } from 'react-helmet-async';\nimport FormRegister from 'components/FormRegist/FormRegist';\nimport style from '../ContactPage/Contact.module.css';\n\nconst Register = () => {\n  return (\n    <HelmetProvider>\n      <div>\n        <Helmet>\n          <title className={style.title}>Registration</title>\n        </Helmet>\n        <FormRegister />\n      </div>\n    </HelmetProvider>\n  );\n};\n\nexport default Register;\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Contact_title__wJYPb\"};"],"names":["useState","name","email","password","confirm","formData","setFormData","useSelector","state","auth","isLoading","error","dispatch","useDispatch","handleChange","e","target","value","prevData","onSubmit","preventDefault","register","htmlFor","type","id","onChange","required","autoComplete","disabled","className","style","FormRegist"],"sourceRoot":""}